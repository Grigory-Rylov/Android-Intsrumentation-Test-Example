import com.github.grishberg.androidemulatormanager.CreateAndRunEmulatorsTask
import com.github.grishberg.androidemulatormanager.DisplayMode
import com.github.grishberg.androidemulatormanager.EmulatorConfig
import com.github.grishberg.androidemulatormanager.EmulatorManagerConfig
import com.github.grishberg.androidemulatormanager.StopAndDeleteEmulatorsTask
import com.github.grishberg.tests.DeviceWrapper
import com.github.grishberg.tests.InstrumentalTestTask
import com.github.grishberg.tests.InstrumentationArgsProvider
import com.github.grishberg.tests.InstrumentationInfo

apply plugin: 'com.android.application'
apply plugin: 'com.github.grishberg.instrumentalplugin'
apply plugin: 'com.github.grishberg.androidemulatormanager'
//apply plugin: 'groovy'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.github.grishberg.instrumentaltestsample"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

/**
 * Custom args provider for instrumentation tests.
 */
class TestArgsProvider implements InstrumentationArgsProvider {

    private static final String TABLET_ANNOTATION =
            "com.github.grishberg.instrumentaltestsample.TabletTest"

    @Override
    Map<String, String> provideInstrumentationArgs(DeviceWrapper targetDevice) {
        HashMap<String, String> args = new HashMap<>()
        if (targetDevice.name == "test_tablet") {
            args.put("annotation", TABLET_ANNOTATION)
        } else {
            args.put("notAnnotation", TABLET_ANNOTATION)
        }
        return args
    }
}

EmulatorManagerConfig emulatorsConfig = extensions.findByType(EmulatorManagerConfig)
Task instrumentalTestTask = tasks.findByName(InstrumentalTestTask.TASK_NAME)
Task createAndRunEmulatorsTask = tasks.findByName(CreateAndRunEmulatorsTask.NAME)
Task stopEmulatorsTask = tasks.findByName(StopAndDeleteEmulatorsTask.NAME)
instrumentalTestTask.finalizedBy stopEmulatorsTask

/**
 * Setup custom instrumentation test runner.
 */
def runTestTask = tasks.create("runTestTask") {
    dependsOn('installDebug', 'installDebugAndroidTest')
    finalizedBy instrumentalTestTask
    mustRunAfter createAndRunEmulatorsTask
    group 'android'
    doLast {
        println "-------------------- setup instrumentation tests ------------------"

        // Custom Args provider for instrumentation test
        instrumentalTestTask.instrumentationArgsProvider = new TestArgsProvider()

        def instrumentationInfo = new InstrumentationInfo.Builder(
                "com.github.grishberg.instrumentaltestsample",
                "com.github.grishberg.instrumentaltestsample.test",
                "android.support.test.runner.AndroidJUnitRunner")
                .setFlavorName("TEST_FLAVOR")
                .build() as InstrumentationInfo

        instrumentalTestTask.setInstrumentationInfo(instrumentationInfo)
    }
}

/**
 * Starts creating emulators and running instrumental tests.
 */
tasks.create("startConnectedTest") {
    finalizedBy createAndRunEmulatorsTask
    finalizedBy runTestTask
    finalizedBy 'assembleDebug'
    finalizedBy 'assembleAndroidTest'

    group 'android'
    doLast {
        println "--------------- setup emulators ----------------"
        EmulatorConfig argPhone = new EmulatorConfig("test_phone",
                DisplayMode.PHONE_HDPI, 26)
        EmulatorConfig argTablet = new EmulatorConfig("test_tablet",
                DisplayMode.TABLET_XHDPI, 26)

        EmulatorConfig[] args = [argPhone, argTablet]

        emulatorsConfig.setEmulatorArgs(args)
        emulatorsConfig.setWaitingTimeout(60 * 3 * 1000)
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    // instrumental test framework
    androidTestImplementation 'com.github.grishberg:annotationprinter:0.1.1'
}