// Top-level build file where you can add configuration options common to all sub-projects/modules.

import com.github.grishberg.androidemulatormanager.CreateEmulatorsTask
import com.github.grishberg.androidemulatormanager.DeleteEmulatorsTask
import com.github.grishberg.androidemulatormanager.EmulatorConfig
import com.github.grishberg.androidemulatormanager.EmulatorManagerConfig
import com.github.grishberg.androidemulatormanager.StartEmulatorsTask
import com.github.grishberg.androidemulatormanager.StopEmulatorsTask
import com.github.grishberg.androidemulatormanager.WaitForEmulatorsTask
import com.github.grishberg.tests.InstrumentalTestTask
import com.github.grishberg.tests.InstrumentationInfo

import com.github.grishberg.androidemulatormanager.DisplayMode

buildscript {

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'

        classpath 'com.github.grishberg:AndroidInstrumentalTestRunner:0.1.4'
        classpath 'com.github.grishberg:AndroidEmulatorManager:0.2.5'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
tasks.create("startConnectedTest") {
    doLast {
        Project appProject = project.rootProject.project("app:")
        EmulatorConfig argPhone = new EmulatorConfig("test_phone",
                DisplayMode.PHONE_HDPI, 26)
        EmulatorConfig argTablet = new EmulatorConfig("test_tablet",
                DisplayMode.TABLET_XHDPI, 26)

        EmulatorConfig[] args = [argPhone, argTablet]
        EmulatorManagerConfig config = appProject.extensions.findByType(EmulatorManagerConfig)
        println config


        config.setEmulatorArgs(args)
        config.setWaitingTimeout(120 * 1000)

        CreateEmulatorsTask createTask = (CreateEmulatorsTask) appProject.getTasks()
                .getByName("createEmulators")

        StartEmulatorsTask startEmulatorsTask = (StartEmulatorsTask) appProject.getTasks()
                .getByName("startEmulators")

        WaitForEmulatorsTask waitForEmulatorsTask = (WaitForEmulatorsTask) appProject.getTasks()
                .getByName("waitForEmulators")

        StopEmulatorsTask stopEmulatorsTask = (StopEmulatorsTask) appProject.getTasks()
                .getByName("stopRunningEmulators")

        DeleteEmulatorsTask deleteTasks = (DeleteEmulatorsTask) appProject.getTasks()
                .getByName("deleteEmulators")

        InstrumentalTestTask instrumentalTestTask = (InstrumentalTestTask) appProject
                .tasks.getByName(InstrumentalTestTask.TASK_NAME)

        println "creating emulators..."
        createTask.runTask()

        println "starting emulators..."
        startEmulatorsTask.runTask()

        println "waiting for emulators..."
        waitForEmulatorsTask.runTask()

        def instrumentationInfo = new InstrumentationInfo.Builder(
                "com.github.grishberg.instrumentaltestsample",
                "com.github.grishberg.instrumentaltestsample",
                "android.support.test.runner.AndroidJUnitRunner")
                .setFlavorName("TEST_FLAVOR")
                .build() as InstrumentationInfo

        def installTask = 'installDebug'
        def installTestTask = 'installDebugAndroidTest'
        //TODO: execute installTask and installTestTask

        println "start instrumentation tests"
        instrumentalTestTask.setInstrumentationInfo(instrumentationInfo)
        instrumentalTestTask.runTask()

        println "stop emulators"
        stopEmulatorsTask.runTask()

        println "delete emulators"
        deleteTasks.runTask()
    }
}